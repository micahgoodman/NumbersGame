<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_Six</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_Number</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>on_top = true;

depth = -y;

shrink = false;
collided = false;
used = false;
landed_on = false;

if (y == view_yview+(view_hview*(7/12))) speed = global.PER_SECOND * global.SPD;
else if (y == view_yview+(view_hview*(9/12))) speed = global.PER_SECOND * (global.SPD+50);
else if (y == view_yview+(view_hview*(11/12))) speed = global.PER_SECOND * (global.SPD-50);

//speed = global.PER_SECOND * (global.SPD+random_range(-50, 50));
direction = 180;

system1 = part_system_create();
particle1 = part_type_create();
part_type_shape(particle1,pt_shape_spark);
part_type_size(particle1,0.20,0.20,0,0);
part_type_scale(particle1,1,1);
part_type_color1(particle1,16711680);
part_type_alpha1(particle1,1);
part_type_speed(particle1,3,3,0,0);
part_type_direction(particle1,70,110,0,0);
part_type_gravity(particle1,0,270);
part_type_orientation(particle1,0,0,0,0,1);
part_type_blend(particle1,1);
part_type_life(particle1,20,20);
emitter1 = part_emitter_create(system1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if speed!=global.PER_SECOND*global.SPD || speed!=global.PER_SECOND*(global.SPD+50) || global.PER_SECOND*(global.SPD-50)
{
//x = 320;
if (y == view_yview+(view_hview*(7/12))) speed = global.PER_SECOND * global.SPD;
else if (y == view_yview+(view_hview*(9/12))) speed = global.PER_SECOND * (global.SPD+50);
else if (y == view_yview+(view_hview*(11/12))) speed = global.PER_SECOND * (global.SPD-50);
}

if shrink == true
{
image_xscale -= .1;
image_yscale = image_xscale;
}

if image_xscale &lt;= 0
{
instance_destroy();
if instance_exists(o_Whirlpool)
    {
    part_emitter_region(system1,emitter1,o_Whirlpool.x,o_Whirlpool.x,o_Whirlpool.y,o_Whirlpool.y,ps_shape_ellipse,1);
    part_emitter_burst(system1, emitter1, particle1, 75);
    }
}

if used == false
{
sprite_index = sp_Six;
}

if x == view_xview-50
{
instance_destroy();
}

if y &lt;= NUM_Y
{
depth = -y;

speed = 0;
direction = 90;
}

/*if global.FIRST!=0 &amp;&amp; global.SECOND!=0 &amp;&amp; used==true
{
alarm[0] = room_speed*1.25;
}
*/
if !instance_exists(o_Bird)
{
landed_on = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sc_Overlap();
if (ds_list_size(CLICKED_OBJECTS) &gt; 1)
{
    for (var i=0; i&lt;ds_list_size(CLICKED_OBJECTS); i++)
    {
        if (depth &gt; CLICKED_OBJECTS[| i].depth) on_top = false;
    }
}

if (o_Explanation.paragraph=="" || COMPLETED&gt;=global.LEVEL) &amp;&amp; landed_on == false &amp;&amp; on_top==true &amp;&amp; !instance_exists(o_GameOver) &amp;&amp; !instance_exists(o_Stats) &amp;&amp; !instance_exists(o_PopUp)
{
    if global.FIRST == 0
    {
    //depth = 500;
    audio_play_sound(so_Clicked, 1, 0);
    //sprite_index = sp_SixSelected;
    speed = global.PER_SECOND*(300+(150*global.COFFEE));
    direction = point_direction(x, y, NUM_X1, NUM_Y);
    global.FIRST = 6;
    used = true;
    FIRST_NUM = self;
    }
    else if global.SECOND==0 &amp;&amp; used==false
    {
    //depth = 500;
    audio_play_sound(so_Clicked, 1, 0);
    //sprite_index = sp_SixSelected;
    speed = global.PER_SECOND*(300+(150*global.COFFEE));
    direction = point_direction(x, y, NUM_X2, NUM_Y);
    global.SECOND = 6;
    used = true;
    SECOND_NUM = self;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if shrink == false
{
draw_set_color(c_black);
draw_set_alpha(.5);
draw_ellipse(x-55, y, x+55, y+60, 0);
draw_set_alpha(1);
}

draw_self();

draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(f_Numbers);

if used == true
{
draw_set_color(c_black);
}
else
{
draw_set_color(c_black);
//draw_set_color(make_color_rgb(200, 200, 200));
}

if shrink == false
{
//draw_set_color(c_black);
//draw_text(x+3, y+2, "6");
draw_set_color(c_black);
draw_set_alpha(.8);
draw_text(x, y, "6");
draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
